{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","console","log","this","props","movie","title","url","id","window","location","href","react_default","a","createElement","key","alt","width","src","poster_src","className","overview","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","searchTerm","_this2","urlString","$","ajax","success","SearchResults","results","movieRows","forEach","poster_path","movieRow","src_MovieRow","push","setState","rows","error","xhr","status","err","event","target","style","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","serachChangeHandler","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOA6BeA,4LAvBPC,QAAQC,IAAI,cACZD,QAAQC,IAAIC,KAAKC,MAAMC,MAAMC,OAC7B,IAAMC,EAAM,oCAAsCJ,KAAKC,MAAMC,MAAMG,GACnEC,OAAOC,SAASC,KAAOJ,mCAGvB,OAAOK,EAAAC,EAAAC,cAAA,SAAOC,IAAKZ,KAAKC,MAAMC,MAAMG,IACpCI,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,MAAM,MAAMC,IAAKf,KAAKC,MAAMC,MAAMc,cAEtDP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKX,KAAKC,MAAMC,MAAMC,OACtBM,EAAAC,EAAAC,cAAA,KAAGM,UAAU,YAAYjB,KAAKC,MAAMC,MAAMgB,UAC1CT,EAAAC,EAAAC,cAAA,SAAOM,UAAU,OAAOE,KAAK,SAASC,QAASpB,KAAKqB,UAAUC,KAAKtB,MAAOuB,MAAM,yBAjBvEC,IAAMC,4BC4EdC,cA1Ef,SAAAA,EAAYzB,GAAO,IAAA0B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA5B,KAAA0B,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA5B,KAAA4B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhC,KAAMC,KACDgC,MAAQ,GAGXN,EAAKO,cAAc,OALJP,6EAQHQ,GAAW,IAAAC,EAAApC,KACvBF,QAAQC,IAAI,gCACZ,IAAMsC,EAAW,sIAAwIF,EACzJG,IAAEC,KAAK,CACLnC,IAAKiC,EACLG,QAAS,SAACC,GACR3C,QAAQC,IAAI,gBAEZ,IAAM2C,EAAUD,EAAcC,QAG1BC,EAAY,GAEhBD,EAAQE,QAAQ,SAAC1C,GACfA,EAAMc,WAAW,kCAAoCd,EAAM2C,YAE3D,IAAMC,EAAWrC,EAAAC,EAAAC,cAACoC,EAAD,CAAUnC,IAAKV,EAAMG,GAAIH,MAAOA,IACjDyC,EAAUK,KAAKF,KAGjBV,EAAKa,SAAS,CAACC,KAAMP,KAEvBQ,MAAO,SAACC,EAAKC,EAAQC,GACnBxD,QAAQC,IAAI,yDAKAwD,GAClBzD,QAAQC,IAAIwD,EAAMC,OAAOjC,OACzB,IACMY,EAAaoB,EAAMC,OAAOjC,MADZvB,KAERkC,cAAcC,oCAIxB,OACE1B,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YACbR,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,IAAI,WAAWC,MAAM,KAAKC,IAAI,gCAErCN,EAAAC,EAAAC,cAAA,MAAIG,MAAM,MACVL,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,8BAKLF,EAAAC,EAAAC,cAAA,SAAO8C,MAAO,CACdC,SAAU,GACVC,QAAS,QACT7C,MAAO,MACP8C,WAAY,EACZC,cAAe,EACfC,YAAa,IACVC,SAAU/D,KAAKgE,oBAAoB1C,KAAKtB,MAAOiE,YAAY,gBAE7DjE,KAAKiC,MAAMiB,aApEFzB,aCOEyC,QACW,cAA7B5D,OAAOC,SAAS4D,UAEe,UAA7B7D,OAAOC,SAAS4D,UAEhB7D,OAAOC,SAAS4D,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3294814f.chunk.js","sourcesContent":["import React from 'react';\r\nimport App from './App';\r\nimport \"./App.css\"\r\n\r\nclass MovieRow extends React.Component {\r\n    viewMovie() {\r\n        console.log('view movie')\r\n        console.log(this.props.movie.title)\r\n        const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\r\n        window.location.href = url \r\n    }\r\n    render() {\r\n        return <table key={this.props.movie.id}>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <img alt=\"poster\" width=\"140\" src={this.props.movie.poster_src}/>\r\n            </td>\r\n            <td>\r\n              <h3>{this.props.movie.title}</h3>\r\n              <p className=\"overView\">{this.props.movie.overview}</p>\r\n              <input className=\"view\" type=\"button\" onClick={this.viewMovie.bind(this)} value=\"More Info\" />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    }\r\n}\r\n\r\nexport default MovieRow;","import React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js'\nimport $ from 'jquery';\n\nclass App extends Component {\nconstructor(props) {\n  super(props) \n  this.state = {}\n\n\n    this.performSearch(\"man\")\n  }\n\n  performSearch(searchTerm){\n    console.log(\"perform search using moviedb\")\n    const urlString =\"https://api.themoviedb.org/3/search/movie?api_key=f0e0a9cf894a69b150b7b2aad60f6df1&language=en-US&page=1&include_adult=false&query=\" + searchTerm;\n    $.ajax({\n      url: urlString,\n      success: (SearchResults) => {\n        console.log(\"fetched data\")\n        //console.log(SearchResults)\n        const results = SearchResults.results\n        //console.log(results[0])\n\n        var movieRows = []\n\n        results.forEach((movie) => {\n          movie.poster_src=\"https://image.tmdb.org/t/p/w185\" + movie.poster_path;\n         // console.log(movie.poster_path)\n          const movieRow = <MovieRow key={movie.id} movie={movie} />\n          movieRows.push(movieRow)\n        })\n\n        this.setState({rows: movieRows})\n       },\n      error: (xhr, status, err) => {\n        console.log('failed')\n      }\n    })\n  }\n\nserachChangeHandler(event) {\n  console.log(event.target.value)\n  const boundObject = this\n  const searchTerm = event.target.value\n  boundObject.performSearch(searchTerm)\n}\n\n  render() {\n    return (\n      <div className=\"titleBar\">\n        <table>\n          <tr>\n            <td>\n              <img alt=\"app icon\" width=\"70\" src=\"tv-tag-logotype-symbol.svg\"/>\n            </td>\n            <td width=\"8\"/>\n            <td>\n             <h1> Movie Master</h1>\n            </td>\n          </tr>\n        </table>\n\n        <input style={{\n        fontSize: 24,\n        display: \"block\",\n        width: \"99%\",\n        paddingTop: 8,\n        paddingBottom: 8,\n        paddingLeft: 16\n        }} onChange={this.serachChangeHandler.bind(this)} placeholder=\"Enter Movie\"/>\n     \n        {this.state.rows}\n     \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}